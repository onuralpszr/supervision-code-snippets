{
    
    "Supervision LineZone Tracking": {
        "prefix": "sv.zones.line",
        "body": [
            "import supervision as sv",
            "from ultralytics import YOLO",
            "",
            "# Initialize model and tracker",
            "model = YOLO(\"${1:yolov8n.pt}\")",
            "tracker = sv.ByteTrack()",
            "",
            "# Video source",
            "frames_generator = sv.get_video_frames_generator(\"${2:path/to/video.mp4}\")",
            "",
            "# Create a line zone",
            "start = sv.Point(x=${3:0}, y=${4:1080})",
            "end = sv.Point(x=${5:1920}, y=${6:1080})",
            "line_zone = sv.LineZone(start=start, end=end)",
            "",
            "# Optional: Annotator for visualization",
            "line_annotator = sv.LineZoneAnnotator(thickness=${7:2}, text_thickness=${8:2}, text_scale=${9:1.0})",
            "box_annotator = sv.BoxAnnotator(thickness=${10:2})",
            "",
            "for frame in frames_generator:",
            "    result = model(frame)[0]",
            "    detections = sv.Detections.from_ultralytics(result)",
            "    detections = tracker.update_with_detections(detections)",
            "    ",
            "    # Check if objects crossed the line",
            "    crossed_in, crossed_out = line_zone.trigger(detections)",
            "    ",
            "    # Optional: Annotate frame for visualization",
            "    annotated_frame = frame.copy()",
            "    annotated_frame = box_annotator.annotate(scene=annotated_frame, detections=detections)",
            "    annotated_frame = line_annotator.annotate(scene=annotated_frame, line_zone=line_zone)",
            "    ",
            "    # Display or save the frame",
            "    # cv2.imshow(\"Tracking\", annotated_frame)",
            "    # if cv2.waitKey(1) & 0xFF == ord('q'): break",
            "    $0",
            "",
            "# Access counts",
            "print(f\"Objects in: {line_zone.in_count}, Objects out: {line_zone.out_count}\")"
        ],
        "description": "Track objects and count crossings over a line zone using Supervision."
    },

    "Supervision PolygonZone Tracking": {
        "prefix": "sv.zones.polygon",
        "body": [
            "import supervision as sv",
            "from ultralytics import YOLO",
            "import numpy as np",
            "import cv2",
            "",
            "# Initialize model and tracker",
            "model = YOLO(\"${1:yolov8n.pt}\")",
            "tracker = sv.ByteTrack()",
            "",
            "# Video source",
            "frames_generator = sv.get_video_frames_generator(\"${2:path/to/video.mp4}\")",
            "",
            "# Create polygon zone (customize points as needed)",
            "polygon = np.array([",
            "    [${3:100}, ${4:200}],  # Point 1",
            "    [${5:200}, ${6:100}],  # Point 2",
            "    [${7:300}, ${8:200}],  # Point 3",
            "    [${9:200}, ${10:300}]   # Point 4",
            "])",
            "polygon_zone = sv.PolygonZone(polygon=polygon, frame_resolution_wh=(${11:1920}, ${12:1080}))",
            "",
            "# Optional: Annotator for visualization",
            "zone_annotator = sv.PolygonZoneAnnotator(thickness=${13:2}, text_thickness=${14:2}, text_scale=${15:1.0})",
            "box_annotator = sv.BoxAnnotator(thickness=${16:2})",
            "",
            "for frame in frames_generator:",
            "    result = model(frame)[0]",
            "    detections = sv.Detections.from_ultralytics(result)",
            "    detections = tracker.update_with_detections(detections)",
            "    ",
            "    # Check which detections are in the zone",
            "    is_in_zone = polygon_zone.trigger(detections=detections)",
            "    ",
            "    # Optional: Annotate frame for visualization",
            "    annotated_frame = frame.copy()",
            "    annotated_frame = box_annotator.annotate(",
            "        scene=annotated_frame,",
            "        detections=detections,",
            "        labels=[f\"{tracker_id}\" for tracker_id in detections.tracker_id]",
            "    )",
            "    annotated_frame = zone_annotator.annotate(scene=annotated_frame, polygon_zone=polygon_zone)",
            "    ",
            "    # Display or save the frame",
            "    # cv2.imshow(\"Tracking\", annotated_frame)",
            "    # if cv2.waitKey(1) & 0xFF == ord('q'): break",
            "    $0",
            "",
            "# Access count",
            "print(f\"Objects in polygon zone: {polygon_zone.current_count}\")"
        ],
        "description": "Track objects within a polygon zone using Supervision."
    }
}